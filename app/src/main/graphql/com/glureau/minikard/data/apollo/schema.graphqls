"""
Autogenerated input type of AcceptChild
"""
input AcceptChildInput {
  childId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcceptChild
"""
type AcceptChildPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of AcceptFriendship
"""
input AcceptFriendshipInput {
  userId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcceptFriendship
"""
type AcceptFriendshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  friendships: [Friendship!]
}

"""
Autogenerated input type of AcceptMoneyRequest
"""
input AcceptMoneyRequestInput {
  moneyRequestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcceptMoneyRequest
"""
type AcceptMoneyRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of AcceptTopupRequest
"""
input AcceptTopupRequestInput {
  cvv: Cvv

  paymentToken: PaymentSource

  requestId: ID!

  """
  Url to redirect to when payment failed
  """
  failureUrl: URL

  """
  Url to redirect to when payment succeeded
  """
  successUrl: URL

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcceptTopupRequest
"""
type AcceptTopupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  paymentId: String

  secureFormUrl: String
}

"""
Autogenerated input type of ActivateCard
"""
input ActivateCardInput {
  cardId: ID!

  lastDigits: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ActivateCard
"""
type ActivateCardPayload {
  card: PhysicalCard

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of AddChild
"""
input AddChildInput {
  email: Email

  phoneNumber: PhoneNumber!

  profile: BaseProfileInput!

  referralCode: ReferralCode

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddChild
"""
type AddChildPayload {
  child: Me

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  commentableId: ID!

  comment: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  comment: Comment

  errors: [UserError!]!
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  emoji: EmojiInput!

  quantity: ReactionQuantity!

  reactionableId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  reaction: Reaction

  totalQuantity: ReactionQuantity
}

"""
Autogenerated input type of AddTopupCard
"""
input AddTopupCardInput {
  """
  A checkout card token
  """
  token: String!

  """
  Url to redirect to when authorization failed
  """
  failureUrl: String

  """
  Url to redirect to when authorization succeeded
  """
  successUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddTopupCard
"""
type AddTopupCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  paymentId: String

  secureFormUrl: String
}

type Address {
  city: String!

  country: Country!

  firstName: String

  fullAddress: String!

  lastName: String

  latitude: Float

  line1: String

  line2: String

  longitude: Float

  state: String

  street: String

  zipcode: String
}

"""
Properties for updating the address
"""
input AddressInput {
  street: String!

  zipcode: String!

  city: String!

  state: String

  country: Country!

  fullAddress: String

  latitude: Float

  longitude: Float
}

type AdultUser implements User {
  avatar: Image

  claimId: ClaimId!

  firstName: String

  hasBankAccount: Boolean!

  id: ID!

  inWaitingList: Boolean! @deprecated(reason: "Not used anymore")

  lastName: String

  nickname: String

  username: String
}

input AmountInput {
  value: PositiveFloat!

  currency: CurrencyCode = EUR
}

type ApplePaySecurity {
  activationData: String!

  encryptedPassData: String!

  ephemeralPublicKey: String!
}

"""
Properties for Apple Pay provisionning input
"""
input ApplePaySecurityInput {
  certificates: [String!]!

  nonce: String!

  nonceSignature: String!
}

"""
Autogenerated input type of AskModirumRegistrationCode
"""
input AskModirumRegistrationCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AskModirumRegistrationCode
"""
type AskModirumRegistrationCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  registrationCode: String!
}

"""
Autogenerated input type of AskParentForMoney
"""
input AskParentForMoneyInput {
  amount: AmountInput!

  parentId: ID

  reason: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AskParentForMoney
"""
type AskParentForMoneyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  request: TopupRequest
}

enum AuthenticationProvider {
  """
  Use “Sign-in with Apple”
  """
  APPLE

  """
  Use “Sign-in with Google”
  """
  GOOGLE

  """
  Use “Snapchat Login”
  """
  SNAPCHAT
}

"""
Properties for an external authentication provider
"""
input AuthenticationProviderInput {
  authorizationCode: String!

  clientId: String

  type: AuthenticationProvider!

  uniqueId: String!
}

type BankAccount implements MoneyAccount {
  balance: Money!

  bic: String!

  cards: [PhysicalCard!]!

  iban: String!

  id: ID!

  lockedTransactions: Boolean!

  user: User!
}

type BankTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

"""
Properties for a user’s profile
"""
input BaseProfileInput {
  firstName: Name!

  lastName: Name!

  dateOfBirth: DateOfBirth!

  placeOfBirth: PlaceOfBirth
}

type BasicPlan implements Plan {
  currentPromotionalOperation: String

  discount: Discount

  id: ID!

  name: String!

  periodUnit: PlanPeriodUnit!

  price: Money!

  trialDuration: Int
}

"""
Autogenerated input type of CancelFriendship
"""
input CancelFriendshipInput {
  userId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelFriendship
"""
type CancelFriendshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  friendships: [Friendship!]
}

"""
Autogenerated input type of CancelRecurringPayment
"""
input CancelRecurringPaymentInput {
  recurringPaymentId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelRecurringPayment
"""
type CancelRecurringPaymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  recurringPayment: RecurringPayment
}

"""
Autogenerated input type of CancelTopupRequest
"""
input CancelTopupRequestInput {
  requestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelTopupRequest
"""
type CancelTopupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  request: TopupRequest
}

interface Card {
  activatedAt: ISO8601DateTime

  blocked: Boolean!

  customText: CardText

  digitalWalletTokens: [DigitalWalletToken!]

  id: ID!

  name: String

  scheme: CardScheme!

  visibleNumber: String
}

"""
The connection type for Card.
"""
type CardConnection {
  """
  A list of edges.
  """
  edges: [CardEdge]

  """
  A list of nodes.
  """
  nodes: [Card]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

enum CardDesign {
  """
  Black
  """
  BLACK

  """
  Pink
  """
  PINK

  """
  Silver
  """
  SILVER
}

"""
An edge in a connection.
"""
type CardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Card
}

"""
Expiration date of a credit card (ex. MM/YY)
"""
scalar CardExpirationDate

"""
A card pin, transported as a string
"""
scalar CardPin

enum CardScheme {
  """
  Mastercard
  """
  MASTERCARD

  """
  Visa
  """
  VISA
}

scalar CardText

type CardTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  card: Card

  cashback: Cashback

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  mobilePaymentProvider: MobilePaymentProvider

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

"""
Properties for updating a card
"""
input CardUpdateInput {
  atm: Boolean

  contactless: Boolean

  blocked: Boolean

  online: Boolean

  swipe: Boolean
}

type Cashback {
  amount: Money!

  brandLogo: String

  brandName: String!

  id: ID!

  sourceTransaction: Transaction!

  status: CashbackStatus!
}

type CashbackBrand {
  description: String!

  logoUrl: String!

  name: String!
}

enum CashbackChannel {
  """
  Both online and offline
  """
  BOTH

  """
  Only offline
  """
  OFFLINE

  """
  Only online
  """
  ONLINE
}

type CashbackOffer {
  brand: CashbackBrand!

  cashbackRate: Float!

  channel: CashbackChannel!

  description: String!

  endDate: ISO8601DateTime

  isConsumed: Boolean!

  legalTerms: String!

  maxAmount: Float

  minAmount: Float!

  name: String!

  pictureUrl: String!

  startDate: ISO8601DateTime!

  status: String!

  url: String
}

enum CashbackStatus {
  """
  Cancelled
  """
  CANCELLED

  """
  Pending validation
  """
  PENDING_VALIDATION

  """
  Validated
  """
  VALIDATED
}

type CashbackTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  cashback: Cashback!

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

type CashbackWallet implements MoneyAccount {
  amountEarned: Money!

  balance: Money!

  id: ID!

  transactions("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, order: TransactionOrder = PROCESSED, direction: OrderDirection = DESC): TransactionConnection

  user: User!
}

"""
Autogenerated input type of ChangePasscode
"""
input ChangePasscodeInput {
  code: String!

  newPasscode: Passcode!

  phoneNumber: PhoneNumber!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ChangePasscode
"""
type ChangePasscodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of ChangePhoneNumber
"""
input ChangePhoneNumberInput {
  newPhoneNumber: PhoneNumber!

  passcode: Passcode!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ChangePhoneNumber
"""
type ChangePhoneNumberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

type Child {
  id: ID

  status: ParenthoodStatus!

  user: Me!
}

"""
A claim id as a String
"""
scalar ClaimId

"""
Autogenerated input type of CloseVault
"""
input CloseVaultInput {
  vaultId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CloseVault
"""
type CloseVaultPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  vault: Vault
}

type ClosingAccountTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  moneyAccount: MoneyAccount!

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

type Comment {
  comment: String!

  createdAt: ISO8601DateTime!

  id: ID!

  reactions: [ReactionsGroup!]!

  user: User!
}

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]

  """
  A list of nodes.
  """
  nodes: [Comment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

"""
Autogenerated input type of ConfirmPhoneNumber
"""
input ConfirmPhoneNumberInput {
  code: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ConfirmPhoneNumber
"""
type ConfirmPhoneNumberPayload {
  accessToken: JWT

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  refreshToken: JWT
}

type Contact {
  hexdigest: String!

  identifier: String

  status: RelationshipStatus

  user: User
}

"""
Properties for a contact from mobile
"""
input ContactInput {
  identifier: String!

  hexdigests: [String!]!
}

"""
A valid country, transported as a string
"""
scalar Country

"""
A coupon code to apply a discount on a subscription
"""
scalar CouponCodeInput

"""
Autogenerated input type of CreateVault
"""
input CreateVaultInput {
  goal: AmountInput!

  name: Name!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateVault
"""
type CreateVaultPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  vault: Vault
}

"""
Autogenerated input type of CreditVault
"""
input CreditVaultInput {
  vaultId: ID!

  amount: AmountInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreditVault
"""
type CreditVaultPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

type Currency {
  isoCode: String!

  name: String!

  symbol: String!

  symbolFirst: Boolean!
}

enum CurrencyCode {
  """
  Euro
  """
  EUR
}

"""
Represents textual data as UTF-8 character sequences. This type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar Cvv

"""
A date of birth in the ISO 8601 format (yyyy-mm-dd)
"""
scalar DateOfBirth

type Deal {
  background: Image!

  benefit: String!

  code: String

  endAt: ISO8601DateTime!

  icon: Image!

  id: ID!

  name: String!

  text: String!

  url: String!
}

"""
Autogenerated input type of DeclineTopupRequest
"""
input DeclineTopupRequestInput {
  requestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeclineTopupRequest
"""
type DeclineTopupRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  request: TopupRequest
}

"""
Autogenerated input type of DeleteAttachment
"""
input DeleteAttachmentInput {
  attachmentId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteAttachment
"""
type DeleteAttachmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of DeleteComment
"""
input DeleteCommentInput {
  commentId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteComment
"""
type DeleteCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of DeleteReaction
"""
input DeleteReactionInput {
  userReactionId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteReaction
"""
type DeleteReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  totalQuantity: ReactionQuantity
}

type Device {
  bundleId: String

  locale: String

  name: String

  osVersion: String

  platform: DevicePlatform

  pushToken: String

  updatedAt: ISO8601DateTime

  vendorIdentifier: String!
}

"""
Properties for a user device
"""
input DeviceInput {
  appVersion: String

  bundleId: String

  name: String

  osVersion: String

  platform: DevicePlatform

  pushToken: String

  sandboxMode: Boolean

  vendorIdentifier: String!
}

enum DevicePlatform {
  """
  Android
  """
  ANDROID

  """
  iOS
  """
  IOS

  """
  Web session
  """
  WEB
}

type DigitalWalletToken {
  paymentProvider: MobilePaymentProvider!

  token: String!
}

"""
Autogenerated input type of DisableCashback
"""
input DisableCashbackInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DisableCashback
"""
type DisableCashbackPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

interface Discount {
  code: String!

  duration: DiscountDuration!
}

interface DiscountDuration {
  type: DiscountDurationPeriod!
}

enum DiscountDurationPeriod {
  """
  Discount is applied for each billing cycle of the subscription
  """
  FOREVER

  """
  Discount is applied for the specified number of months
  """
  LIMITED_PERIOD

  """
  Discount is applied once
  """
  ONE_TIME
}

"""
An email address
"""
scalar Email

"""
An emoji
"""
type Emoji {
  name: String!

  unicode: String!
}

"""
An emoji’s unicode or text alias
"""
scalar EmojiInput

"""
Autogenerated input type of EnableCashback
"""
input EnableCashbackInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of EnableCashback
"""
type EnableCashbackPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
A JSON Web Token which can be expired
"""
scalar ExpiredJWT

type ExternalAuthenticationProvider {
  id: ID!

  type: AuthenticationProvider!

  uniqueId: String!
}

type Family {
  memberships: [FamilyMembership!]!
}

type FamilyMembership {
  member: Me!

  nickname: String

  primary: Boolean!

  status: FamilyMembershipStatus!

  type: UserCategory!
}

enum FamilyMembershipStatus {
  """
  A requested user/family relationship
  """
  PENDING

  """
  An accepted user/family relationship
  """
  APPROVED
}

"""
A file uploaded by the user
"""
scalar File

interface FileInterface {
  contentType: String

  filename: String

  id: ID!

  url: String!
}

type FixedAmountDiscount implements Discount {
  amount: Money!

  code: String!

  duration: DiscountDuration!
}

type ForeverDiscount implements DiscountDuration {
  type: DiscountDurationPeriod!
}

"""
Autogenerated input type of ForgetTopupCard
"""
input ForgetTopupCardInput {
  topupCardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ForgetTopupCard
"""
type ForgetTopupCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of ForgotPasscode
"""
input ForgotPasscodeInput {
  dateOfBirth: ISO8601Date!

  phoneNumber: PhoneNumber!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ForgotPasscode
"""
type ForgotPasscodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

type Friendship {
  status: RelationshipStatus

  user: User!
}

type FundsOrigin implements KycItemInterface {
  status: KycItemStatus!

  value: String
}

"""
Source of funds as a string
"""
scalar FundsOriginInput

type FxTransparencyInfo {
  billingCurrency: String!

  ecbConversionRate: Float!

  ecbReferenceAmount: Float!

  issuerBillingAmount: Float!

  issuerConversionRate: Float!

  issuerVsEcbDiff: Float!

  schemeConversionRate: Float!

  schemeName: String!

  schemeVsEcbDiff: Float!

  transactionAmount: Float!

  transactionCurrency: String!

  transactionDate: String!
}

type GenericFile implements FileInterface {
  contentType: String

  filename: String

  id: ID!

  url: String!
}

type GooglePaySecurity {
  displayName: String!

  lastDigits: String!

  network: String!

  opaquePaymentCard: String!

  tokenServiceProvider: String!
}

"""
Hexadecimal code of a color
"""
scalar HexadecimalColorCode

"""
Properties for updating the home address
"""
input HomeAddressInput {
  street: String

  zipcode: String!

  city: String!

  state: String

  country: Country!

  fullAddress: String

  latitude: Float

  longitude: Float

  line1: String!

  line2: String
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded date
"""
scalar ISO8601DateStrict

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type IdentityVerification implements KycItemInterface {
  status: KycItemStatus!

  url: String
}

type Image implements FileInterface {
  contentType: String

  filename: String

  height: Int

  id: ID!

  url: String!

  width: Int
}

enum InitSessionChallenge {
  """
  Next step is to call initSession
  """
  INIT_SESSION

  """
  Next step is to verify the OTP we sent to the user
  """
  OTP

  """
  Next step is for the user to sign-in with her passcode
  """
  PASSCODE
}

"""
Autogenerated input type of InitSession
"""
input InitSessionInput {
  createUser: Boolean = false

  phoneNumber: PhoneNumber!

  platform: DevicePlatform

  referralCode: ReferralCode

  vendorIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of InitSession
"""
type InitSessionPayload {
  challenge: InitSessionChallenge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  expiresAt: ISO8601DateTime
}

type InternalTransferTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  moneyAccount: MoneyAccount!

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

"""
Autogenerated input type of InviteOtherParent
"""
input InviteOtherParentInput {
  email: Email!

  phoneNumber: PhoneNumber!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of InviteOtherParent
"""
type InviteOtherParentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
A JSON Web Token
"""
scalar JWT

type KardEmployeePlan implements Plan {
  currentPromotionalOperation: String

  discount: Discount

  id: ID!

  name: String!

  periodUnit: PlanPeriodUnit!

  price: Money!

  trialDuration: Int
}

type Kyc {
  amountRemaining: Money @deprecated(reason: "Not useful anymore")

  deadline: ISO8601DateTime

  fundsOrigin: FundsOrigin!

  globalStatus: KycGlobalStatus!

  identityVerification: IdentityVerification!

  incomingAmountRemaining: Money @deprecated(reason: "Not useful anymore")

  outgoingAmountRemaining: Money @deprecated(reason: "Not useful anymore")

  proofOfAddress: ProofOfAddress!

  required: Boolean!
}

enum KycGlobalStatus {
  """
  Some kyc items are not approved
  """
  NOT_APPROVED

  """
  All kyc items are approved
  """
  APPROVED
}

interface KycItemInterface {
  status: KycItemStatus!
}

enum KycItemStatus {
  """
  has not started or is missing necessary information/document
  """
  UNSTARTED

  """
  is pending approval
  """
  PENDING

  """
  is rejected
  """
  REJECTED

  """
  is approved
  """
  APPROVED
}

type LegacyPlan implements Plan {
  currentPromotionalOperation: String

  discount: Discount

  id: ID!

  name: String!

  periodUnit: PlanPeriodUnit!

  price: Money!

  trialDuration: Int
}

type LegacyUser implements User {
  avatar: Image

  claimId: ClaimId!

  firstName: String

  hasBankAccount: Boolean!

  id: ID!

  inWaitingList: Boolean! @deprecated(reason: "Not used anymore")

  lastName: String

  nickname: String

  username: String
}

type LimitedPeriodDiscount implements DiscountDuration {
  months: Int!

  type: DiscountDurationPeriod!
}

type Me {
  bankAccount: BankAccount

  banned: Boolean!

  boost: Money @deprecated(reason: "Not used anymore")

  canOrderCard: Boolean!

  card: PhysicalCard

  cardBeingSetup: PhysicalCard

  cardTransactionsCount: Int!

  cards("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CardConnection

  cashbackEnabled: Boolean!

  cashbackWallet: CashbackWallet

  children: [Child!]!

  claimId: ClaimId!

  """
  Uploaded address book contacts
  """
  contacts(kardersOnly: Boolean = false): [Contact!]

  createdAt: ISO8601DateTime!

  """
  Currently available deals
  """
  deals: [Deal!]!

  devices: [Device!]

  earnings: Money

  email: String

  emailConfirmed: Boolean!

  externalAuthenticationProviders: [ExternalAuthenticationProvider!]!

  externalIncomingAmount: Money @deprecated(reason: "Not used anymore")

  family: Family

  friendships: [Friendship!]

  fundsOrigin: String

  id: ID!

  inWaitingList: Boolean! @deprecated(reason: "Not used anymore")

  incomingRecurringPayment: RecurringPayment

  invitedByOther: Boolean!

  kyc: Kyc!

  modirumId: String

  moneySendings: [MoneySending!]!

  nickname: String

  onboardingDone: Boolean!

  outgoingRecurringPayments: [RecurringPayment!]!

  parent: Parent

  pendingDebts: [MoneyRequest!]!

  phoneNumber: PhoneNumber!

  potentialEarnings: Money! @deprecated(reason: "Not used anymore")

  profile: Profile

  ranking: Ranking @deprecated(reason: "Not used anymore")

  referralCode: String

  referralUrl: String

  referrals: [Referral!]!

  referrer: User

  requestedTopupAmount: Money @deprecated(reason: "Not used anymore")

  savingsAmount: Money!

  subscription: Subscription

  topupCards: [TopupCard!]!

  topupRequestsFromChildren: [TopupRequest!]!

  topupRequestsToParent: [TopupRequest!]!

  type: UserCategory

  typedFriendsTransactions("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, order: TransactionOrder = PROCESSED, direction: OrderDirection = DESC): TransactionConnection

  typedTransactions("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, order: TransactionOrder = PROCESSED, direction: OrderDirection = DESC): TransactionConnection

  unconfirmedEmail: String

  vaults: [Vault!]!
}

type Merchant {
  id: ID!

  label: String
}

enum MobilePaymentProvider {
  """
  Apple Pay
  """
  APPLE_PAY

  """
  Google Pay
  """
  GOOGLE_PAY
}

type ModirumDevice {
  deviceName: String

  serialNumber: String!
}

type Money {
  currency: Currency

  value: Float
}

interface MoneyAccount {
  balance: Money!

  id: ID!

  user: User!
}

"""
The message of a money link
"""
scalar MoneyLinkMessage

"""
The sender of a money link
"""
scalar MoneyLinkSender

type MoneyLinkTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  from: MoneyLinkSender

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  message: MoneyLinkMessage

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

type MoneyRequest {
  amount: Money!

  id: ID!

  owner: User!

  paymentLink: String!

  reason: String
}

type MoneySending {
  amount: Money!

  id: ID!

  owner: User!

  reason: String
}

type Mutation {
  """
  Accept a child and confirm the parent
  """
  acceptChild("Parameters for AcceptChild" input: AcceptChildInput!): AcceptChildPayload

  """
  Accept a friendship request
  """
  acceptFriendship("Parameters for AcceptFriendship" input: AcceptFriendshipInput!): AcceptFriendshipPayload

  """
  Accept to pay for a money request
  """
  acceptMoneyRequest("Parameters for AcceptMoneyRequest" input: AcceptMoneyRequestInput!): AcceptMoneyRequestPayload

  """
  Accept a topup request
  """
  acceptTopupRequest("Parameters for AcceptTopupRequest" input: AcceptTopupRequestInput!): AcceptTopupRequestPayload

  """
  Activate a credit card
  """
  activateCard("Parameters for ActivateCard" input: ActivateCardInput!): ActivateCardPayload

  """
  Add a new child and accept them automatically
  """
  addChild("Parameters for AddChild" input: AddChildInput!): AddChildPayload

  """
  Add a comment
  """
  addComment("Parameters for AddComment" input: AddCommentInput!): AddCommentPayload

  """
  Add a reaction
  """
  addReaction("Parameters for AddReaction" input: AddReactionInput!): AddReactionPayload

  """
  Add a topup card after completing 3DS
  """
  addTopupCard("Parameters for AddTopupCard" input: AddTopupCardInput!): AddTopupCardPayload

  """
  Request a modirum registration code
  """
  askModirumRegistrationCode("Parameters for AskModirumRegistrationCode" input: AskModirumRegistrationCodeInput!): AskModirumRegistrationCodePayload

  """
  Ask money from your parent
  """
  askParentForMoney("Parameters for AskParentForMoney" input: AskParentForMoneyInput!): AskParentForMoneyPayload

  """
  Cancel a friendship
  """
  cancelFriendship("Parameters for CancelFriendship" input: CancelFriendshipInput!): CancelFriendshipPayload

  """
  Cancel a recurring payment
  """
  cancelRecurringPayment("Parameters for CancelRecurringPayment" input: CancelRecurringPaymentInput!): CancelRecurringPaymentPayload

  """
  Cancel a topup you requested
  """
  cancelTopupRequest("Parameters for CancelTopupRequest" input: CancelTopupRequestInput!): CancelTopupRequestPayload

  """
  Change passcode after having declared it as forgotten
  """
  changePasscode("Parameters for ChangePasscode" input: ChangePasscodeInput!): ChangePasscodePayload

  """
  Change user’s phone number
  """
  changePhoneNumber("Parameters for ChangePhoneNumber" input: ChangePhoneNumberInput!): ChangePhoneNumberPayload

  """
  Close one of your vaults
  """
  closeVault("Parameters for CloseVault" input: CloseVaultInput!): CloseVaultPayload

  """
  Confirm user’s new phone number
  """
  confirmPhoneNumber("Parameters for ConfirmPhoneNumber" input: ConfirmPhoneNumberInput!): ConfirmPhoneNumberPayload

  """
  Create a vault for your money
  """
  createVault("Parameters for CreateVault" input: CreateVaultInput!): CreateVaultPayload

  """
  Credit one of your vaults
  """
  creditVault("Parameters for CreditVault" input: CreditVaultInput!): CreditVaultPayload

  """
  Decline a topup request
  """
  declineTopupRequest("Parameters for DeclineTopupRequest" input: DeclineTopupRequestInput!): DeclineTopupRequestPayload

  """
  Delete an attachment
  """
  deleteAttachment("Parameters for DeleteAttachment" input: DeleteAttachmentInput!): DeleteAttachmentPayload

  """
  Delete a Comment
  """
  deleteComment("Parameters for DeleteComment" input: DeleteCommentInput!): DeleteCommentPayload

  """
  Delete a reaction
  """
  deleteReaction("Parameters for DeleteReaction" input: DeleteReactionInput!): DeleteReactionPayload

  """
  Disable cashback
  """
  disableCashback("Parameters for DisableCashback" input: DisableCashbackInput!): DisableCashbackPayload

  """
  Enable cashback
  """
  enableCashback("Parameters for EnableCashback" input: EnableCashbackInput!): EnableCashbackPayload

  """
  Forget a TopupCard
  """
  forgetTopupCard("Parameters for ForgetTopupCard" input: ForgetTopupCardInput!): ForgetTopupCardPayload

  """
  Request an OTP to change a forgotten passcode
  """
  forgotPasscode("Parameters for ForgotPasscode" input: ForgotPasscodeInput!): ForgotPasscodePayload

  """
  Initialize an authenticated session
  """
  initSession("Parameters for InitSession" input: InitSessionInput!): InitSessionPayload

  """
  Invite another parent in the family
  """
  inviteOtherParent("Parameters for InviteOtherParent" input: InviteOtherParentInput!): InviteOtherParentPayload

  """
  Order a credit card for you or your child
  """
  orderCard("Parameters for OrderCard" input: OrderCardInput!): OrderCardPayload

  """
  Order your virtual card
  """
  orderVirtualCard("Parameters for OrderVirtualCard" input: OrderVirtualCardInput!): OrderVirtualCardPayload

  """
  Autocomplete places
  """
  placeAutocomplete("Parameters for PlaceAutocomplete" input: PlaceAutocompleteInput!): PlaceAutocompletePayload

  """
  Provision Apple Pay
  """
  provisionAppleWallet("Parameters for ProvisionAppleWallet" input: ProvisionAppleWalletInput!): ProvisionAppleWalletPayload

  """
  Provision digital wallets
  """
  provisionWallet("Parameters for ProvisionWallet" input: ProvisionWalletInput!): ProvisionWalletPayload

  """
  Refuse a friendship request
  """
  refuseFriendship("Parameters for RefuseFriendship" input: RefuseFriendshipInput!): RefuseFriendshipPayload

  """
  Register a recurring payment for given child
  """
  registerRecurringPayment("Parameters for RegisterRecurringPayment" input: RegisterRecurringPaymentInput!): RegisterRecurringPaymentPayload

  """
  Refuse to pay for a money request
  """
  rejectMoneyRequest("Parameters for RejectMoneyRequest" input: RejectMoneyRequestInput!): RejectMoneyRequestPayload

  """
  Renew credentials from a refresh token
  """
  renewCredentials("Parameters for RenewCredentials" input: RenewCredentialsInput!): RenewCredentialsPayload

  """
  Request a coupon code for the provided deal
  """
  requestCoupon("Parameters for RequestCoupon" input: RequestCouponInput!): RequestCouponPayload

  """
  Create a friendship request
  """
  requestFriendship("Parameters for RequestFriendship" input: RequestFriendshipInput!): RequestFriendshipPayload

  """
  Request money from both internal and external users
  """
  requestMoney("Parameters for RequestMoney" input: RequestMoneyInput!): RequestMoneyPayload

  """
  Send contacts
  """
  sendContacts("Parameters for SendContacts" input: SendContactsInput!): SendContactsPayload

  """
  Send money to both internal and external users
  """
  sendMoney("Parameters for SendMoney" input: SendMoneyInput!): SendMoneyPayload

  """
  Update current user’s child profile
  """
  setChildProfile("Parameters for SetChildProfile" input: SetChildProfileInput!): SetChildProfilePayload

  """
  Set current user’s source of funds
  """
  setFundsOrigin("Parameters for SetFundsOrigin" input: SetFundsOriginInput!): SetFundsOriginPayload

  """
  Set current user’s parent information
  """
  setParent("Parameters for SetParent" input: SetParentInput!): SetParentPayload

  """
  Set current user passcode and confirm the account
  """
  setPasscode("Parameters for SetPasscode" input: SetPasscodeInput!): SetPasscodePayload

  """
  Update current user’s profile
  """
  setProfile("Parameters for SetProfile" input: SetProfileInput!): SetProfilePayload

  """
  Set current user’s referrer
  """
  setReferrer("Parameters for SetReferrer" input: SetReferrerInput!): SetReferrerPayload

  """
  Set current user’s type
  """
  setUserCategory("Parameters for SetUser" input: SetUserInput!): SetUserPayload

  """
  Customise your credit card
  """
  setupCard("Parameters for SetupCard" input: SetupCardInput!): SetupCardPayload

  """
  Send a user’s passcode to get her auth token
  """
  signIn("Parameters for SignIn" input: SignInInput!): SignInPayload

  """
  Sign-in user using external authentication provider
  """
  signInWithProvider("Parameters for SignInWithProvider" input: SignInWithProviderInput!): SignInWithProviderPayload

  """
  Sign out a user’s device
  """
  signOut("Parameters for SignOut" input: SignOutInput!): SignOutPayload

  """
  Start identity verification workflow
  """
  startIdentityVerification("Parameters for StartIdentityVerification" input: StartIdentityVerificationInput!): StartIdentityVerificationPayload

  """
  Start identity verification workflow
  """
  startKyc("Parameters for StartIdentityVerification" input: StartIdentityVerificationInput!): StartIdentityVerificationPayload @deprecated(reason: "Use StartIdentityVerification instead")

  """
  Subscribe to a plan
  """
  subscribeToPlan("Parameters for SubscribeToPlan" input: SubscribeToPlanInput!): SubscribeToPlanPayload

  """
  Top up a user
  """
  topupAccount("Parameters for TopupAccount" input: TopupAccountInput!): TopupAccountPayload

  """
  Transfer money from a personal money account to another
  """
  transferMoney("Parameters for TransferMoney" input: TransferMoneyInput!): TransferMoneyPayload

  """
  Update current user’s avatar
  """
  updateAvatar("Parameters for UpdateAvatar" input: UpdateAvatarInput!): UpdateAvatarPayload

  """
  Update a credit card
  """
  updateCard("Parameters for UpdateCard" input: UpdateCardInput!): UpdateCardPayload

  """
  Update a user device
  """
  updateDevice("Parameters for UpdateDevice" input: UpdateDeviceInput!): UpdateDevicePayload

  """
  Update current user’s email
  """
  updateEmail("Parameters for UpdateEmail" input: UpdateEmailInput!): UpdateEmailPayload

  """
  Update a user home address
  """
  updateHomeAddress("Parameters for UpdateHomeAddress" input: UpdateHomeAddressInput!): UpdateHomeAddressPayload

  """
  Order a credit card for you or your child
  """
  updateNickname("Parameters for UpdateNickname" input: UpdateNicknameInput!): UpdateNicknamePayload

  """
  Update a user shipping address
  """
  updateShippingAddress("Parameters for UpdateShippingAddress" input: UpdateShippingAddressInput!): UpdateShippingAddressPayload

  """
  Update a topup card
  """
  updateTopupCard("Parameters for UpdateTopupCard" input: UpdateTopupCardInput!): UpdateTopupCardPayload

  """
  Update attributes of a transaction
  """
  updateTransaction("Parameters for UpdateTransaction" input: UpdateTransactionInput!): UpdateTransactionPayload

  """
  Update settings for a transaction
  """
  updateTransactionSettings("Parameters for UpdateTransactionSettings" input: UpdateTransactionSettingsInput!): UpdateTransactionSettingsPayload @deprecated(reason: "Use updateTransaction instead")

  """
  Update a user
  """
  updateUser("Parameters for UpdateUser" input: UpdateUserInput!): UpdateUserPayload

  """
  Update current user’s username
  """
  updateUsername("Parameters for UpdateUsername" input: UpdateUsernameInput!): UpdateUsernamePayload

  """
  Update a vault attributes
  """
  updateVault("Parameters for UpdateVault" input: UpdateVaultInput!): UpdateVaultPayload

  """
  Upload your proof of address
  """
  uploadProofOfAddress("Parameters for UploadProofOfAddress" input: UploadProofOfAddressInput!): UploadProofOfAddressPayload

  """
  Verify an OTP challenge for the provided device
  """
  verifyOtp("Parameters for VerifyOTP" input: VerifyOTPInput!): VerifyOTPPayload
}

"""
A name as a string
"""
scalar Name

"""
Date and amount that should be charged on next billing
"""
type NextBillingInformation {
  amount: Money

  date: ISO8601Date
}

type OneTimeDiscount implements DiscountDuration {
  type: DiscountDurationPeriod!
}

"""
Autogenerated input type of OrderCard
"""
input OrderCardInput {
  childId: ID

  pin: CardPin!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of OrderCard
"""
type OrderCardPayload {
  card: PhysicalCard

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

enum OrderDirection {
  """
  Ascending order
  """
  ASC

  """
  Descending order
  """
  DESC
}

"""
Autogenerated input type of OrderVirtualCard
"""
input OrderVirtualCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of OrderVirtualCard
"""
type OrderVirtualCardPayload {
  card: VirtualCard

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

type P2pTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  reason: String

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  triggeredBy: PublicUser!

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type PanUrl {
  ip: String!

  url: String!
}

type Parent {
  id: ID

  status: ParenthoodStatus!

  user: ParentUser!
}

type ParentUser implements User {
  avatar: Image

  claimId: ClaimId!

  email: String

  firstName: String

  hasBankAccount: Boolean!

  hasTopupCard: Boolean!

  id: ID!

  inWaitingList: Boolean! @deprecated(reason: "Not used anymore")

  lastName: String

  nickname: String

  phoneNumber: PhoneNumber!

  username: String
}

enum ParenthoodStatus {
  """
  A requested parent/child relationship
  """
  PENDING

  """
  An accepted parent/child relationship
  """
  ACCEPTED
}

"""
A valid user passcode
"""
scalar Passcode

"""
The source of the payment (id or token)
"""
scalar PaymentSource

type PercentageDiscount implements Discount {
  code: String!

  duration: DiscountDuration!

  percentage: Float!
}

"""
A phone number
"""
scalar PhoneNumber

type PhysicalCard implements Card {
  activatedAt: ISO8601DateTime

  atm: Boolean!

  blocked: Boolean!

  contactless: Boolean!

  customText: CardText

  design: CardDesign!

  digitalWalletTokens: [DigitalWalletToken!]

  id: ID!

  name: String

  online: Boolean!

  scheme: CardScheme!

  swipe: Boolean!

  visibleNumber: String
}

type PinUrl {
  ip: String!

  url: String!
}

"""
Autogenerated input type of PlaceAutocomplete
"""
input PlaceAutocompleteInput {
  address: String!

  city: Boolean = false

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PlaceAutocomplete
"""
type PlaceAutocompletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  places: [Address!]
}

"""
A place of birth as a string
"""
scalar PlaceOfBirth

interface Plan {
  currentPromotionalOperation: String

  discount: Discount

  id: ID!

  name: String!

  periodUnit: PlanPeriodUnit!

  price: Money!

  trialDuration: Int
}

enum PlanPeriodUnit {
  DAY

  WEEK

  MONTH

  YEAR
}

type PointOfInterest {
  matchedMerchant: Merchant

  merchantCity: String

  merchantCode: String

  merchantName: String

  merchantStreet: String

  merchantTerminalId: String

  merchantZip: String
}

"""
Represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar PositiveFloat

"""
Properties identifying a user
"""
type Profile {
  age: Int

  avatar: Image

  birthday: ISO8601DateTime

  firstName: String

  homeAddress: Address

  lastName: String

  placeOfBirth: String

  shareTransactions: Boolean!

  shippingAddress: Address

  username: String
}

"""
Properties for registering a profile
"""
input ProfileInput {
  username: String

  firstName: String

  lastName: String

  birthday: ISO8601DateTime

  avatar: File

  shareTransactions: Boolean

  address: AddressInput

  placeOfBirth: String
}

type ProofOfAddress implements KycItemInterface {
  files: [FileInterface!]!

  status: KycItemStatus!
}

"""
Autogenerated input type of ProvisionAppleWallet
"""
input ProvisionAppleWalletInput {
  cardId: ID!

  deviceType: ProvisionDevice!

  appVersion: String!

  security: ApplePaySecurityInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ProvisionAppleWallet
"""
type ProvisionAppleWalletPayload {
  applePaySecurity: ApplePaySecurity!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

enum ProvisionDevice {
  """
  Mobile phone
  """
  MOBILE_PHONE

  """
  Tablet
  """
  TABLET

  """
  Watch
  """
  WATCH
}

"""
Autogenerated input type of ProvisionWallet
"""
input ProvisionWalletInput {
  cardId: ID!

  deviceType: ProvisionDevice!

  appVersion: String!

  security: WalletSecurityInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ProvisionWallet
"""
type ProvisionWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  security: WalletSecurity
}

type PublicUser {
  avatar: Image

  firstName: String

  id: ID!

  lastName: String

  username: String
}

type PunctualTopup implements Topup {
  amount: Money!

  id: ID!

  imageUrl: String!

  message: String

  processedAt: ISO8601DateTime!

  sender: FamilyMembership
}

type Query {
  """
  Fetch cashback offers
  """
  cashbackOffers: [CashbackOffer!]!

  """
  Find one of your children
  """
  child(childId: ID!): Me!

  """
  Fetch fx transparency info
  """
  fxTransparencyInfo(amount: Float!, fromCurrency: String!, date: ISO8601Date!): FxTransparencyInfo!

  """
  Retrieve the current user's account
  """
  me: Me

  """
  List a user's Modirum unrolled devices
  """
  modirumDevices: [ModirumDevice!]!

  """
  List available plans
  """
  plans(couponCode: CouponCodeInput): [Plan!]!

  """
  Find relationship status for strangers
  """
  strangers(hexdigests: [String!]!): [Contact!]!

  """
  History of topups
  """
  topupsHistory(userId: ID!, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): TopupConnection!

  """
  Find a transaction by ID
  """
  transaction(transactionId: ID!): Transaction

  """
  Fetch transactions
  """
  transactions(categoryId: ID, from: ISO8601DateStrict, to: ISO8601DateStrict = "2021-08-25", userId: ID!, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): TransactionConnection!

  """
  Overview of transactions, grouped by category
  """
  transactionsByCategoryOverview(from: ISO8601DateStrict!, to: ISO8601DateStrict = "2021-08-25", userId: ID!): [TransactionCategoryOverview!]!

  """
  Retrieve the url to query to have the card PAN
  """
  urlToGetPan(cardId: ID!): PanUrl!

  """
  Retrieve the url to query to have the card PIN
  """
  urlToGetPin(cardId: ID!): PinUrl!

  """
  Retrieve the url to query to set the card PIN
  """
  urlToSetPin(cardId: ID!): PinUrl!

  """
  Find a user by username
  """
  user(username: String!): User

  """
  Fetch one of your vaults
  """
  vault(vaultId: ID!): Vault!
}

type Ranking {
  money: Money!

  position: Int!
}

type Reaction {
  emoji: Emoji!

  id: ID!

  quantity: Int!

  user: PublicUser!
}

"""
The connection type for Reaction.
"""
type ReactionConnection {
  """
  A list of edges.
  """
  edges: [ReactionEdge]

  """
  A list of nodes.
  """
  nodes: [Reaction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Reaction
}

"""
A quantity of reactions
"""
scalar ReactionQuantity

"""
Reactions grouped by emoji and reactionable
"""
type ReactionsGroup {
  emoji: Emoji!

  """
  Paginated detailed reaction per user
  """
  paginatedDetails("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): ReactionConnection!

  """
  Total reactions for every users
  """
  totalQuantity: Int!
}

"""
An ical recurrence rule as a string
"""
scalar RecurrenceRule

type RecurringPayment {
  active: Boolean!

  amount: Money!

  cancelledAt: ISO8601DateTime

  child: User!

  firstPayment: ISO8601DateStrict!

  id: ID!

  nextPayment: ISO8601DateStrict!

  topupCard: TopupCard!
}

enum RecurringPaymentFrequency {
  """
  Happens on a weekly basis
  """
  WEEKLY

  """
  Happens on a monthly basis
  """
  MONTHLY
}

type RecurringTopup implements Topup {
  amount: Money!

  frequency: RecurringPaymentFrequency!

  id: ID!

  imageUrl: String!

  processedAt: ISO8601DateTime!

  sender: FamilyMembership
}

type Referral {
  moneyEarned: Boolean!

  status: RelationshipStatus

  user: User!
}

"""
A valid Referral Code, transported as a string
"""
scalar ReferralCode

"""
Autogenerated input type of RefuseFriendship
"""
input RefuseFriendshipInput {
  userId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RefuseFriendship
"""
type RefuseFriendshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  friendships: [Friendship!]
}

"""
Autogenerated input type of RegisterRecurringPayment
"""
input RegisterRecurringPaymentInput {
  amount: AmountInput!

  childId: ID!

  rule: RecurrenceRule

  startDate: ISO8601Date

  topupCardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RegisterRecurringPayment
"""
type RegisterRecurringPaymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  recurringPayment: RecurringPayment
}

"""
Autogenerated input type of RejectMoneyRequest
"""
input RejectMoneyRequestInput {
  moneyRequestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RejectMoneyRequest
"""
type RejectMoneyRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

type RejectedTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  card: Card

  cashback: Cashback

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  mobilePaymentProvider: MobilePaymentProvider

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  rejectionReason: String!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

enum RelationshipStatus {
  """
  No relations between both users
  """
  NONE

  """
  You want to be friend with the user
  """
  PENDING

  """
  The user wants to be your friend
  """
  REQUESTED

  """
  You accepted the user as a friend
  """
  ACCEPTED

  """
  You blocked the user
  """
  BLOCKED
}

"""
Autogenerated input type of RenewCredentials
"""
input RenewCredentialsInput {
  accessToken: ExpiredJWT!

  refreshToken: JWT!

  vendorIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RenewCredentials
"""
type RenewCredentialsPayload {
  accessToken: JWT

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  refreshToken: JWT
}

"""
Autogenerated input type of RequestCoupon
"""
input RequestCouponInput {
  dealId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RequestCoupon
"""
type RequestCouponPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  deal: Deal

  errors: [UserError!]!
}

"""
Autogenerated input type of RequestFriendship
"""
input RequestFriendshipInput {
  userId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RequestFriendship
"""
type RequestFriendshipPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  friendships: [Friendship!]
}

"""
Autogenerated input type of RequestMoney
"""
input RequestMoneyInput {
  """
  A list of kard user ids
  """
  internalUsersIds: [ID!]!

  """
  A list of contact digests
  """
  externalUsers: [String!]!

  amount: AmountInput!

  reason: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RequestMoney
"""
type RequestMoneyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  request: MoneyRequest
}

type RequestedTopup implements Topup {
  amount: Money!

  id: ID!

  imageUrl: String!

  processedAt: ISO8601DateTime!

  reason: String

  sender: FamilyMembership
}

"""
Autogenerated input type of SendContacts
"""
input SendContactsInput {
  contacts: [ContactInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendContacts
"""
type SendContactsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Fetch contacts
  """
  contacts(kardersOnly: Boolean = false): [Contact!]

  errors: [UserError!]!
}

"""
Autogenerated input type of SendMoney
"""
input SendMoneyInput {
  """
  A list of kard user ids
  """
  internalUsersIds: [ID!]!

  """
  A list of contact digests
  """
  externalUsers: [String!]!

  amount: AmountInput!

  reason: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendMoney
"""
type SendMoneyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  sending: MoneySending
}

"""
Autogenerated input type of SetChildProfile
"""
input SetChildProfileInput {
  childId: ID!

  profile: BaseProfileInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetChildProfile
"""
type SetChildProfilePayload {
  child: Me

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of SetFundsOrigin
"""
input SetFundsOriginInput {
  origin: FundsOriginInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetFundsOrigin
"""
type SetFundsOriginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of SetParent
"""
input SetParentInput {
  email: Email

  firstName: String

  lastName: String

  phoneNumber: PhoneNumber

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetParent
"""
type SetParentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  parentSet: Boolean
}

"""
Autogenerated input type of SetPasscode
"""
input SetPasscodeInput {
  passcode: Passcode!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetPasscode
"""
type SetPasscodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  passcodeSet: Boolean
}

"""
Autogenerated input type of SetProfile
"""
input SetProfileInput {
  profile: BaseProfileInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetProfile
"""
type SetProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of SetReferrer
"""
input SetReferrerInput {
  referralCode: ReferralCode!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetReferrer
"""
type SetReferrerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of SetUser
"""
input SetUserInput {
  type: UserCategoryInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetUser
"""
type SetUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of SetupCard
"""
input SetupCardInput {
  childId: ID

  customText: CardText

  design: CardDesign

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupCard
"""
type SetupCardPayload {
  card: PhysicalCard

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Properties for updating the shipping address
"""
input ShippingAddressInput {
  street: String

  zipcode: String!

  city: String!

  state: String

  country: Country!

  fullAddress: String

  latitude: Float

  longitude: Float

  line1: String!

  line2: String

  firstName: String

  lastName: String
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  authenticationProvider: AuthenticationProviderInput

  passcode: String!

  phoneNumber: PhoneNumber!

  vendorIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  accessToken: JWT

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  refreshToken: JWT
}

"""
Autogenerated input type of SignInWithProvider
"""
input SignInWithProviderInput {
  authenticationProvider: AuthenticationProviderInput!

  vendorIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignInWithProvider
"""
type SignInWithProviderPayload {
  accessToken: JWT

  challenge: InitSessionChallenge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  refreshToken: JWT
}

"""
Autogenerated input type of SignOut
"""
input SignOutInput {
  vendorIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  signedOut: Boolean
}

"""
Autogenerated input type of StartIdentityVerification
"""
input StartIdentityVerificationInput {
  redirectUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of StartIdentityVerification
"""
type StartIdentityVerificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of SubscribeToPlan
"""
input SubscribeToPlanInput {
  couponCode: CouponCodeInput

  planId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubscribeToPlan
"""
type SubscribeToPlanPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  subscription: Subscription
}

"""
Current subscription
"""
type Subscription {
  cancellationReason: String

  cancelledAt: ISO8601DateTime

  id: ID!

  nextBilling: NextBillingInformation

  plan: Plan!

  status: SubscriptionStatus!
}

enum SubscriptionStatus {
  """
  Subscription is in active state and will be charged at start of each term
  """
  ACTIVE

  """
  Subscription has been cancelled. No new recurring actions will take place, but any pending payments will be collected
  """
  CANCELLED

  """
  Subscription is scheduled to start in a future date
  """
  FUTURE

  """
  Subscription is in trial
  """
  IN_TRIAL

  """
  Subscription will be cancelled at end of the current term
  """
  NON_RENEWING

  """
  Subscription is paused. No new recurring actions will be allowed, but any pending payments will be collected
  """
  PAUSED
}

type TeenUser implements User {
  avatar: Image

  claimId: ClaimId!

  firstName: String

  hasBankAccount: Boolean!

  id: ID!

  inWaitingList: Boolean! @deprecated(reason: "Not used anymore")

  lastName: String

  nickname: String

  username: String
}

interface Topup {
  amount: Money!

  id: ID!

  imageUrl: String!

  processedAt: ISO8601DateTime!

  sender: FamilyMembership
}

"""
Autogenerated input type of TopupAccount
"""
input TopupAccountInput {
  amount: AmountInput!

  childId: ID

  cvv: Cvv

  from: MoneyLinkSender

  message: MoneyLinkMessage

  """
  The providerSourceId of a registered topupCard or a token
  """
  paymentSource: PaymentSource!

  """
  User to topup (defaults to yourself when logged in)
  """
  recipientId: ID

  """
  Url to redirect to when payment failed
  """
  failureUrl: String

  """
  Url to redirect to when payment succeeded
  """
  successUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TopupAccount
"""
type TopupAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  paymentId: String

  secureFormUrl: String
}

"""
Card used for topping up a bank account
"""
type TopupCard {
  default: Boolean!

  expirationDate: CardExpirationDate!

  id: ID!

  last4: String!

  name: String

  providerPaymentId: String

  providerSourceId: String!
}

"""
Properties for updating a topup card
"""
input TopupCardUpdateInput {
  default: Boolean

  name: String
}

"""
The connection type for Topup.
"""
type TopupConnection {
  """
  A list of edges.
  """
  edges: [TopupEdge]

  """
  A list of nodes.
  """
  nodes: [Topup]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TopupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Topup
}

type TopupRequest {
  accepted: Boolean!

  amount: Money!

  cancelled: Boolean!

  declined: Boolean!

  id: ID!

  reason: String

  requestee: User!

  requester: User!
}

type TopupTransaction implements Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  message: MoneyLinkMessage

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sender: FamilyMembership

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

interface Transaction {
  accuracy: Int

  address: String

  amount: Money

  category: TransactionCategory

  comments("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CommentConnection

  createdAt: ISO8601DateTime!

  description: String @deprecated(reason: "Use title instead")

  icon: Image @deprecated(reason: "Use image or category { image } instead")

  id: ID!

  image: Image

  latitude: Float

  longitude: Float

  poi: PointOfInterest

  processedAt: ISO8601DateTime!

  reactions: [ReactionsGroup!]!

  sharedAt: ISO8601DateTime

  status: TransactionStatus

  title: String

  updatedAt: ISO8601DateTime!

  user: User!

  userReactions: [ReactionsGroup!]!

  visibility: TransactionVisibility!
}

type TransactionCategory {
  color: HexadecimalColorCode

  id: ID!

  image: Image

  name: String!
}

type TransactionCategoryOverview {
  amount: Money!

  category: TransactionCategory!

  count: Int!

  percentage: Float!
}

"""
The connection type for Transaction.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge]

  """
  A list of nodes.
  """
  nodes: [Transaction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Transaction
}

enum TransactionOrder {
  """
  Order by created_at
  """
  CREATED

  """
  Order by processed_at
  """
  PROCESSED

  """
  Order by shared_at (for friends transactions)
  """
  SHARED

  """
  Order by updated_at
  """
  UPDATED
}

"""
Properties for updating settings on a transaction
"""
input TransactionSettingsInput {
  address: String

  description: String

  image: File

  latitude: Float

  longitude: Float

  title: String

  visibility: TransactionVisibility
}

enum TransactionStatus {
  """
  Transaction has been cancelled
  """
  CANCELLED

  """
  Transaction has been ongoing for too long
  """
  DANGLING

  """
  Transaction is ongoing
  """
  PENDING

  """
  Transaction has been processed
  """
  SETTLED
}

enum TransactionVisibility {
  """
  Shared with friends
  """
  SHARED

  """
  Shared with friends but with some restricted data
  """
  RESTRICTED

  """
  Hidden to everyone
  """
  HIDDEN
}

"""
Autogenerated input type of TransferMoney
"""
input TransferMoneyInput {
  sourceId: ID

  destinationId: ID!

  amount: AmountInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TransferMoney
"""
type TransferMoneyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
An URL
"""
scalar URL

"""
Autogenerated input type of UpdateAvatar
"""
input UpdateAvatarInput {
  avatar: File!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateAvatar
"""
type UpdateAvatarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of UpdateCard
"""
input UpdateCardInput {
  cardId: ID!

  attributes: CardUpdateInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateCard
"""
type UpdateCardPayload {
  card: Card

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of UpdateDevice
"""
input UpdateDeviceInput {
  device: DeviceInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateDevice
"""
type UpdateDevicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  device: Device

  errors: [UserError!]!
}

"""
Autogenerated input type of UpdateEmail
"""
input UpdateEmailInput {
  email: Email!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEmail
"""
type UpdateEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of UpdateHomeAddress
"""
input UpdateHomeAddressInput {
  address: HomeAddressInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateHomeAddress
"""
type UpdateHomeAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of UpdateNickname
"""
input UpdateNicknameInput {
  parentId: ID!

  nickname: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateNickname
"""
type UpdateNicknamePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!
}

"""
Autogenerated input type of UpdateShippingAddress
"""
input UpdateShippingAddressInput {
  address: ShippingAddressInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateShippingAddress
"""
type UpdateShippingAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of UpdateTopupCard
"""
input UpdateTopupCardInput {
  topupCardId: ID!

  attributes: TopupCardUpdateInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateTopupCard
"""
type UpdateTopupCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  topupCard: TopupCard
}

"""
Autogenerated input type of UpdateTransaction
"""
input UpdateTransactionInput {
  transactionId: ID!

  attributes: TransactionSettingsInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateTransaction
"""
type UpdateTransactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  transaction: Transaction
}

"""
Autogenerated input type of UpdateTransactionSettings
"""
input UpdateTransactionSettingsInput {
  transactionId: ID!

  attributes: TransactionSettingsInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateTransactionSettings
"""
type UpdateTransactionSettingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  transaction: BankTransaction
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  referrerCode: ReferralCode

  user: UserUpdateInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of UpdateUsername
"""
input UpdateUsernameInput {
  username: Username!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUsername
"""
type UpdateUsernamePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

"""
Autogenerated input type of UpdateVault
"""
input UpdateVaultInput {
  vaultId: ID!

  color: HexadecimalColorCode

  emoji: EmojiInput

  name: Name

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateVault
"""
type UpdateVaultPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  vault: Vault
}

"""
Autogenerated input type of UploadProofOfAddress
"""
input UploadProofOfAddressInput {
  files: [File!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UploadProofOfAddress
"""
type UploadProofOfAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  user: Me
}

interface User {
  avatar: Image

  claimId: ClaimId!

  firstName: String

  hasBankAccount: Boolean!

  id: ID!

  inWaitingList: Boolean! @deprecated(reason: "Not used anymore")

  lastName: String

  nickname: String

  username: String
}

enum UserCategory {
  ADULT

  PARENT

  TEEN
}

enum UserCategoryInput {
  PARENT

  TEEN
}

"""
A user-readable error
"""
type UserError {
  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

"""
Properties for updating a user
"""
input UserUpdateInput {
  email: Email

  fundsOrigin: String

  profile: ProfileInput
}

"""
A username as a string
"""
scalar Username

type Vault implements MoneyAccount {
  balance: Money!

  closed: Boolean!

  color: HexadecimalColorCode!

  emoji: Emoji!

  goal: Money!

  id: ID!

  name: Name!

  transactions("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, order: TransactionOrder = PROCESSED, direction: OrderDirection = DESC): TransactionConnection

  user: User!
}

"""
Autogenerated input type of VerifyOTP
"""
input VerifyOTPInput {
  authenticationProvider: AuthenticationProviderInput

  code: String!

  phoneNumber: PhoneNumber!

  vendorIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of VerifyOTP
"""
type VerifyOTPPayload {
  accessToken: JWT

  challenge: InitSessionChallenge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [UserError!]!

  refreshToken: JWT
}

type VirtualCard implements Card {
  activatedAt: ISO8601DateTime

  blocked: Boolean!

  customText: CardText

  digitalWalletTokens: [DigitalWalletToken!]

  id: ID!

  name: String

  scheme: CardScheme!

  visibleNumber: String
}

union WalletSecurity = ApplePaySecurity|GooglePaySecurity

"""
Properties for digital wallet provisionning input
"""
input WalletSecurityInput {
  certificates: [String!]

  deviceId: String

  nonce: String

  nonceSignature: String

  type: WalletSecurityProvider!

  walletAccountId: String
}

enum WalletSecurityProvider {
  """
  Apple Pay
  """
  APPLE

  """
  Google Pay
  """
  GOOGLE
}

schema {
  query: Query
  mutation: Mutation
}
